generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  SUPER_ADMIN
  ADMIN
  TENANT
}

enum Room_Type {
  SINGLE
  DOUBLE
  TRIPLE
  QUADRUPLE
  STANDARD
  PREMIUM
}

model User {
  id        Int      @id @default(autoincrement())
  firstname String?
  lastname  String?
  username  String   @unique
  email     String   @unique
  password  String
  role      Role     @default(TENANT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  ownedPgs      PG[]              @relation("OwnedPGs")
  managedPgs    PgAssignedAdmin[]
  roomTenants   RoomTenant[]
  TenantRequest TenantRequest[]
}

model PG {
  id        Int      @id @default(autoincrement())
  pgName    String   @unique
  location  String
  ownedById Int      @map("owned_by")
  ownedBy   User     @relation("OwnedPGs", fields: [ownedById], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  rooms          Room[]
  assignedAdmins PgAssignedAdmin[]

  @@map("pg")
}

model Room {
  id                Int       @id @default(autoincrement())
  roomNumber        Int       @unique @map("room_number")
  roomName          String
  roomType          Room_Type @default(SINGLE)
  floor             Int
  blockName         String
  rentPrice         Decimal
  depositPrice      Decimal
  roomSize          Float
  availableStatus   Boolean   @default(true)
  attachedBathrooms Boolean   @default(true)
  balconyStatus     Boolean   @default(true)
  cctvStatus        Boolean   @default(true)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt

  pgId          Int             @map("pg_id")
  pg            PG              @relation(fields: [pgId], references: [id])
  roomTenants   RoomTenant[]
  tenantRequest TenantRequest[]
}

model RoomTenant {
  userId Int  @map("user_id")
  roomId Int  @map("room_id")
  user   User @relation(fields: [userId], references: [id])
  room   Room @relation(fields: [roomId], references: [id])

  @@id([userId, roomId])
}

model PgAssignedAdmin {
  adminId    Int      @map("admin_id")
  pgId       Int      @map("pg_id")
  admin      User     @relation(fields: [adminId], references: [id])
  pg         PG       @relation(fields: [pgId], references: [id])
  assignedAt DateTime @default(now())

  @@id([adminId, pgId])
}

model TenantRequest {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    Int      @map("requested_by")
  roomId    Int      @map("room_id")
  status    String
  user      User     @relation(fields: [userId], references: [id])
  room      Room     @relation(fields: [roomId], references: [id])
}
